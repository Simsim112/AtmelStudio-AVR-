
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000807  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  000009f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001783  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	34 c0       	rjmp	.+104    	; 0x104 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include<avr/io.h>
#include <util/delay.h>

int main()
{
	DDRD = 0x00;
  9e:	11 ba       	out	0x11, r1	; 17
	DDRA = 0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a bb       	out	0x1a, r24	; 26
	
	while(1)
	{
		if(PIND == 0x80)
  a4:	80 b3       	in	r24, 0x10	; 16
  a6:	80 38       	cpi	r24, 0x80	; 128
  a8:	19 f4       	brne	.+6      	; 0xb0 <main+0x12>
		{
			PORTA =	0xFD; //0b 1111 1101
  aa:	8d ef       	ldi	r24, 0xFD	; 253
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	fa cf       	rjmp	.-12     	; 0xa4 <main+0x6>
		}
		else if(PIND == 0x40)
  b0:	80 b3       	in	r24, 0x10	; 16
  b2:	80 34       	cpi	r24, 0x40	; 64
  b4:	19 f4       	brne	.+6      	; 0xbc <main+0x1e>
		{
			PORTA = 0x61; //0b 0110 0001
  b6:	81 e6       	ldi	r24, 0x61	; 97
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <main+0x6>
		}
		else if(PIND == 0x20)
  bc:	80 b3       	in	r24, 0x10	; 16
  be:	80 32       	cpi	r24, 0x20	; 32
  c0:	19 f4       	brne	.+6      	; 0xc8 <main+0x2a>
		{
			PORTA = 0xDB; //0b 1101 1011
  c2:	8b ed       	ldi	r24, 0xDB	; 219
  c4:	8b bb       	out	0x1b, r24	; 27
  c6:	ee cf       	rjmp	.-36     	; 0xa4 <main+0x6>
		}
		else if(PIND == 0x10)
  c8:	80 b3       	in	r24, 0x10	; 16
  ca:	80 31       	cpi	r24, 0x10	; 16
  cc:	19 f4       	brne	.+6      	; 0xd4 <main+0x36>
		{
			PORTA = 0xF3; //0b 1111 0011
  ce:	83 ef       	ldi	r24, 0xF3	; 243
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	e8 cf       	rjmp	.-48     	; 0xa4 <main+0x6>
		}
		else if(PIND == 0x08)
  d4:	80 b3       	in	r24, 0x10	; 16
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	19 f4       	brne	.+6      	; 0xe0 <main+0x42>
		{
			PORTA = 0x67; //0b 0110 0111
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	e2 cf       	rjmp	.-60     	; 0xa4 <main+0x6>
		}
		else if(PIND == 0x04)
  e0:	80 b3       	in	r24, 0x10	; 16
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	19 f4       	brne	.+6      	; 0xec <main+0x4e>
		{
			PORTA = 0xB7; //0b 1011 0111
  e6:	87 eb       	ldi	r24, 0xB7	; 183
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	dc cf       	rjmp	.-72     	; 0xa4 <main+0x6>
		}
		else if(PIND == 0x02)
  ec:	80 b3       	in	r24, 0x10	; 16
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	19 f4       	brne	.+6      	; 0xf8 <main+0x5a>
		{
			PORTA = 0x3F; //0b 0011 1111
  f2:	8f e3       	ldi	r24, 0x3F	; 63
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	d6 cf       	rjmp	.-84     	; 0xa4 <main+0x6>
		}
		else if(PIND == 0x01)
  f8:	80 b3       	in	r24, 0x10	; 16
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	99 f6       	brne	.-90     	; 0xa4 <main+0x6>
		{
			PORTA = 0xE5; //0b 1110 0101
  fe:	85 ee       	ldi	r24, 0xE5	; 229
 100:	8b bb       	out	0x1b, r24	; 27
 102:	d0 cf       	rjmp	.-96     	; 0xa4 <main+0x6>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
